#dict

#键-值（key-value）存储


d={
    'Lucy':90,
    'Bob':78,
    'Tom':40
}

print(d['Tom'])

#
#一个key只能对应一个value,如果key不存在，dict就会报错

#要删除一个key，用pop(key)方法，对应的value也会从dict中删除：
d.pop('Tom')
print(d)

# 请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。
#
# 和list比较，dict有以下几个特点：
#
# 查找和插入的速度极快，不会随着key的增加而变慢；
# 需要占用大量的内存，内存浪费多。

# 而list相反：
# 查找和插入的时间随着元素的增加而增加；
# 占用空间小，浪费内存很少。


# set   和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。要创建一个set，需要提供一个list作为输入集合：

s=set([1,2,3,7,7,3])
print(s)

#传入的参数[1, 2, 3]是一个list，而显示的{1, 2, 3}只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的,重复元素在set中自动被过滤


#通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果
s.add(22)

#通过remove(key)方法可以删除元素：
s.remove(22)

#set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作
s1=set([1,2,3])
s2=set([2,3,4])

print(s1 & s2)
print(s1 | s2)

#set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。

# s3=set((1,2,3))
print(s3)

#
